function testBeforeCommit() {
  mvn2 test -pl $1 -Pintegration -T4C
}

PURPLE=$(echo -en "\033[35m")
GREEN=$(echo -en "\033[32m")
RED=$(echo -en "\033[31m")
YELLOW=$(echo -e "\033[33m")
BLUE=$(echo -e "\033[1;34m")
NORMAL=$(echo -e "\033[0m")

mvn2() {
mvn $* | sed \
  -e "s/^\(.ERROR. .*\)$/$RED\1$NORMAL/		; #contain ERROR start 2nd char
  s/^\(Tests run: .*<<< FAILURE\!\)/$RED\1$NORMAL/	; # contain Tests run: <something> <<< FAILURE
  s/^\( \w*\\([\w\.]*\\).*: .*\)/$RED\1$NORMAL/	; # a name of method(name of class with package): error message
  s/^\(Failed tests:.*\)/$RED\1$NORMAL/		; # contain Failed tests:
  s/^\(|.*\)/$RED\1$NORMAL/			; # line start with pipe
  s/^\(### Content of table.*\)/$RED\1$NORMAL/	; # line start ### Content of table (dbunit)
  s/^\(Caused by*.*\)/$RED\1$NORMAL/		; # line start Caused by
  s/^\(\tat .*\)/$RED\1$NORMAL/			; # line start at ... (stack trace)
  s/^\(\t*.*more.*\)/$RED\1$NORMAL/		; # line start with tab and contain something with more (stack trace)
  s/^\(##*.*\)/$RED\1$NORMAL/			; # line start more than 1 #
  s/^\(Running.*\)/$BLUE\1$NORMAL/		; # Line start with Running (surefire)
  s/^\(Tests run: .*[^FAILURE].*\)/${YELLOW}\1${NORMAL}/ ;  # test not failed
  s/^\(.INFO. BUILD FAILURE.*\)$/$RED\1$NORMAL/	; # BUILD FAILURE
  s/^\(.INFO. ----.*\)$/$PURPLE\1$NORMAL/		; # INFO of module block
  s/^\(.INFO. Building.*SNAPSHOT\)$/$PURPLE\1$NORMAL/; # INFO of module block (with version)
  s/^\(.INFO. --- .* ---.*\)$/$PURPLE\1$NORMAL/	; # info of plugin
  s/^\(.INFO. .*\)$/$GREEN\1$NORMAL/		; # other info
  s/^\(.WARNING. .*\)$/$BLUE\1$NORMAL/		; # warning
  s/^\(\w*\.\w*\) \(r [0-9]* w 0 e 0 .* seconds.*\)$/$BLUE\1$NORMAL $YELLOW\2$NORMAL/;
  s/^\(\w*\.\w*\) \(r [0-9]* w [1-9] e 0 .* seconds.*\)$/$RED\1 \2$NORMAL/;
  s/^\(\w*\.\w*\) \(r [0-9]* w [1-9] e [1-9] .* seconds.*\)$/$RED\1 \2$NORMAL/;
  s/^\(\w*\.\w*\) \(r [0-9]* w 0 e [1-9] .* seconds.*\)$/$RED\1 \2$NORMAL/;
            # Fitnesse execute test;
  s/^\([^\[].*\)/${YELLOW}\1${NORMAL}/ ; 		# line doesn't start with [
  "
}

# environment for unit tests
export com_outbrain_environment=junit

alias mvn-eclipse='mvn2 eclipse:eclipse -Dwtpversion=2.0 -DdownloadSources=true  -DdownloadJavadocs=true'
alias mvn-install='mvn2 install -DskipTests=true -DwarProject.packaging=jar'
alias mvn-clean-install="mvn2 clean install -DskipTests=true -DwarProject.packaging=jar"
alias mvn-clean-install-eclipse='mvn2 clean install  -DskipTests=true  eclipse:eclipse -DwarProject.packaging=jar -Dwtpversion=2.0 -DdownloadSources=true -DdownloadJavadocs=true'
alias mvn-clean-compile-all='mvn2 clean test-compile'
alias mvn-all="mvn-clean-install"
alias mvn-test-fast="mvn2 test"
alias ps-java='ps aux | grep java'

function mvn-make {
  mvn reactor:make -Dmake.artifacts=$1 -Dmake.goals=install,-DskipTests -DwarProject.packaging=jar
}

function mvn-make-dependents {
  mvn reactor:make-dependents -Dmake.artifacts=$1 -Dmake.goals=install,-DskipTests -DwarProject.packaging=jar
}

function mvn-make-all-related {
  mvn reactor:make reactor:make-dependents -Dmake.artifacts=$1 -Dmake.goals=install,-DskipTests -DwarProject.packaging=jar
}

# maven setup
# Maven Stuff
export M2_VERSION=3.0.5
export M2_HOME=$USER_HOME/bin/apache-maven-$M2_VERSION
export M2=$M2_HOME/bin
export M2_REPO=~/.m2/
export MAVEN_OPTS='-Xmx1024m -Xms256m -XX:MaxPermSize=384m'
export PATH=$PATH:$M2


# svn setup
alias sd='svn diff --diff-cmd=/home/$USER/bin/svn-diff-meld'

# hadoop familiy setup
export HADOOP_HOME=/home/$USER/bin/hadoop-0.20.2
export HIVE_HOME=/home/$USER/bin/hive/build/dist
export PATH=$PATH:$HADOOP_HOME/bin:$HIVE_HOME/bin

# ant setup
export ANT_LIB=/usr/share/ant/lib
